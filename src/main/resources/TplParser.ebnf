// This is a grammar for a simple, text-base pipeline language.
//
// Bits gleefully stolen from the XPath 2.0 and Java 7 grammars.
//
// It is designed to be fed to http://www.bottlecaps.de/rex/

Pipeline       ::= "pipeline" PortMap? "{" ( VarBinding | Cut )+ "}" EOF

Cut            ::= Step ( ARR Step )*

Step           ::= PortMap? ( AtomicStep | CompoundStep )
//PortMap        ::= "[" PortBinding ("," PortBinding )* "]"

BindingList    ::= PortBinding ("," PortBinding)*
SourceBindingList ::= BindingList
ResultBindingList ::= BindingList

PortMap        ::= "[" SourceBindingList? (";" ResultBindingList?)? "]"

PortBinding    ::= AnyName ":" ( AnyName | StringLiteral )

AtomicStep     ::= StepName Opts?

CompoundStep   ::= Group | ForEach | While | Until | Choose | Try

CompoundBody   ::= "{" (VarBinding | Cut )+ "}"

Group          ::= "group" Opts? PortMap? CompoundBody
ForEach        ::= "for-each" Opts? PortMap? CompoundBody
While          ::= "while" Opts? PortMap? CompoundBody
Until          ::= "until" Opts? PortMap? CompoundBody
Choose         ::= "choose" Opts? PortMap? "{" When* Otherwise? "}"
When           ::= "when" Opts? PortMap? CompoundBody
Otherwise      ::= "otherwise" Opts? PortMap? CompoundBody
Try            ::= "try" Opts? PortMap? CompoundBody Catch+
Catch          ::= "catch" Opts? PortMap? CompoundBody

Opts           ::= "(" OptionBindings? ")"

OptionBindings ::= OptionBinding ("," OptionBinding)*
OptionBinding  ::= AnyName "=" ( VarOrString | StringArray )

VarOrString    ::= ( VarRef | StringLiteral )

VarBinding     ::= "$" AnyName ":=" ( StringLiteral | StringArray )

VarRef         ::= "$" AnyName

StringArray    ::= "[" (VarOrString ("," VarOrString )* )? "]"

Ignorable      ::= WhiteSpace | Comment /* ws: definition */

<?TOKENS?>

UnicodeInputCharacter  ::= UnicodeEscape | RawInputCharacter
UnicodeEscape          ::= '\' UnicodeMarker HexDigit HexDigit HexDigit HexDigit
UnicodeMarker          ::= 'u'+
RawInputCharacter      ::= [#x0001-#xD7FF] | [#xE000-#xFFFD] | [#x10000-#x10FFFF]
HexDigit               ::= [0-9a-fA-F]
InputCharacter         ::= UnicodeInputCharacter - ( CR | LF )

Comment                ::= TraditionalComment | EndOfLineComment
TraditionalComment     ::= '/*' ( UnicodeInputCharacter*
                                  - ( UnicodeInputCharacter* '*/' UnicodeInputCharacter* ) )
                           '*/'
EndOfLineComment       ::= '//' InputCharacter*

WhiteSpace             ::= ' ' | #x0009 | #x000C | LineTerminator

LF                     ::= #x000A
CR                     ::= #x000D
LineTerminator         ::= LF | CR | CR LF

StringLiteral          ::= '"' ( EscapeQuot | [^"] )* '"'
                         | "'" ( EscapeApos | [^'] )* "'"  /* ws: explicit */
EscapeQuot             ::= '""'
EscapeApos             ::= "''"

ARR                    ::= "->" | "â†’"
EOF                    ::= $

NameString             ::= NameStartChar NameChar*
AnyName                ::= NameString
StepName               ::= NameString - CompoundStepName

CompoundStepName       ::= ("pipeline" | "group" | "for-each" | "while" | "until"
                            | "choose" | "when" | "otherwise" | "try" | "catch" )

NameStartChar
         ::=
           | [A-Z]
           | '_'
           | [a-z]
           | [#x00C0-#x00D6]
           | [#x00D8-#x00F6]
           | [#x00F8-#x02FF]
           | [#x0370-#x037D]
           | [#x037F-#x1FFF]
           | [#x200C-#x200D]
           | [#x2070-#x218F]
           | [#x2C00-#x2FEF]
           | [#x3001-#xD7FF]
           | [#xF900-#xFDCF]
           | [#xFDF0-#xFFFD]
           | [#x10000-#xEFFFF]
NameChar ::= NameStartChar
           | '-'
           | '.'
           | [0-9]
           | #x00B7
           | [#x0300-#x036F]
           | [#x203F-#x2040]
