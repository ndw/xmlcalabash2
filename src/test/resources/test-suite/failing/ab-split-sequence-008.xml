<t:test xmlns:t="http://xproc.org/ns/testsuite/3.0" expected="pass">
   <t:info>
      <t:title>p:split-sequence-008 (AB)</t:title>
      <t:revision-history>
         <t:revision>
            <t:date>2019-05-22</t:date>
            <t:author>
               <t:name>Achim Berndzen</t:name>
            </t:author>
            <t:description xmlns="http://www.w3.org/1999/xhtml">
               <p>Additional tests for p:split-sequence</p>
            </t:description>
         </t:revision>
      </t:revision-history>
   </t:info>
   <t:description xmlns="http://www.w3.org/1999/xhtml">
      <p>Tests p:split-sequence</p>
   </t:description>
   
   <t:pipeline>
      <p:declare-step name="pipeline" xmlns:p="http://www.w3.org/ns/xproc" version="3.0">
         <p:output port="result"/>
         
         <p:identity name="one">
            <p:with-input port="source">
               <one />
            </p:with-input>
         </p:identity>
         
         <p:identity name="two">
            <p:with-input><two /></p:with-input>
         </p:identity>
         
         <p:split-sequence name="splitter" test="/one">
            <p:with-input pipe="@one @one @two @two @one" />
         </p:split-sequence>
         
         <p:wrap-sequence name="matched" wrapper="matched">
            <p:with-input pipe="matched" />
         </p:wrap-sequence>
         
         <p:wrap-sequence name="not-matched" wrapper="not-matched">
            <p:with-input pipe="not-matched@splitter" />
         </p:wrap-sequence>
         
         <p:wrap-sequence wrapper="result">
            <p:with-input pipe="@matched @not-matched" />
         </p:wrap-sequence>
      </p:declare-step>
   </t:pipeline>
   <t:schematron>
      <s:schema xmlns:s="http://purl.oclc.org/dsdl/schematron" xmlns="http://www.w3.org/1999/xhtml">
         <s:pattern>
            <s:rule context="/">
               <s:assert test="result">Root element is not 'result'.</s:assert>
               <s:assert test="count(result/matched/*)=3">Element 'matched' does not have three children.</s:assert>
               <s:assert test="count(result/matched/one)=3">All children of element 'matched' should be 'one'.</s:assert>
               <s:assert test="count(result/not-matched/*)=2">Element 'not-matched' does not have two children.</s:assert>
               <s:assert test="count(result/not-matched/two)=2">All children of element 'not-matched' should be 'two'.</s:assert>
            </s:rule>
         </s:pattern>
      </s:schema>
   </t:schematron>
</t:test>