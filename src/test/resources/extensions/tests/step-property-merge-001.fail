<test xmlns='http://xproc.org/ns/testsuite/3.0' expected="pass">
  <pipeline>
<p:declare-step xmlns:p="http://www.w3.org/ns/xproc"
                xmlns:c="http://www.w3.org/ns/xproc-step"
                xmlns:ex="http://xmlcalabash.com/ext/foo"
                xmlns:exf="http://exproc.org/standard/functions"
                xmlns:cx="http://xmlcalabash.com/ns/extensions"
                name="main"
                version="1.0">
  <p:output port="result">
    <p:pipe step="extract" port="properties"/>
  </p:output>

  <p:identity name="doc">
    <p:with-input port="source">
      <p:inline>
        <doc>Some document</doc>
      </p:inline>
    </p:with-input>
  </p:identity>

  <p:identity name="prop">
    <p:with-input port="source">
      <p:inline>
        <c:document-properties xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                               xmlns:xs="http://www.w3.org/2001/XMLSchema">
          <p:foo xmlns:p="http://www.w3.org/ns/xproc" xsi:type="xs:integer">1</p:foo>
          <content-type>application/xml</content-type>
          <b xsi:type="xs:integer">2</b>
        </c:document-properties>
      </p:inline>
    </p:with-input>
  </p:identity>

  <cx:property-merge>
    <p:with-input port="source" pipe="@doc"/>
    <p:with-input port="properties" pipe="@prop"/>
  </cx:property-merge>

  <cx:property-extract name="extract"/>

</p:declare-step>
  </pipeline>
  <schematron>
<s:schema xmlns:s="http://purl.oclc.org/dsdl/schematron">
   <s:ns prefix="c" uri="http://www.w3.org/ns/xproc-step"/>
   <s:ns prefix="xsi" uri="http://www.w3.org/2001/XMLSchema-instance"/>
   <s:ns prefix="p" uri="http://www.w3.org/ns/xproc"/>

   <s:pattern>
     <s:rule context="/*">
       <s:assert test="self::c:document-properties">
         The pipeline root is not c:document-properties
       </s:assert>
       <s:assert test="count(/*/p:foo) = 1">
         There is not exactly one p:foo child element
       </s:assert>
       <s:assert test="count(/*/content-type) = 1">
         There is not exactly one content-type child element
       </s:assert>
     </s:rule>
     <s:rule context="content-type">
       <s:assert test=". = 'application/xml'">
         The content-type is not application/xml
       </s:assert>
     </s:rule>
     <s:rule context="p:foo">
       <s:assert test=". = 1">
         The value of p:foo is not 1
       </s:assert>
       <s:assert test="@xsi:type = 'xs:int'">
         The value of p:foo is not an xs:int
       </s:assert>
     </s:rule>
   </s:pattern>
</s:schema>
  </schematron>
</test>
